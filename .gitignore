# ================================================================
# 📁 mapofdev 프로젝트 .gitignore
# ================================================================
#
# 🤔 .gitignore 파일이란?
# - Git(버전 관리 도구)에게 "이 파일들은 추적하지 마!"라고 알려주는 파일
# - 여기에 적힌 파일/폴더들은 GitHub에 올라가지 않음
# - 왜 필요한가? 보안, 용량, 개인설정 때문
#
# 🎯 언제 Git에 올리면 안되는가?
# 1. 개인 비밀번호나 API 키가 들어있는 파일
# 2. 컴퓨터가 자동으로 만드는 파일 (컴파일 결과 등)
# 3. 너무 큰 파일들 (GitHub는 100MB 제한)
# 4. 내 컴퓨터에서만 쓰는 설정 파일
#

# ================================================================
# ☕ Java 관련 (자바 컴파일하면 나오는 파일들)
# ================================================================

# 컴파일된 클래스 파일들
*.class
# 🔍 설명: .java 파일을 컴파일하면 .class 파일이 나옴
# 💡 왜 제외? 소스코드(.java)만 있으면 언제든 다시 만들 수 있음
# 📝 예시: User.java → User.class (자동 생성)

# JAR, WAR 파일들 (자바 실행 파일)
*.jar
*.war
*.ear
# 🔍 설명: 자바 프로그램을 패키징한 실행 파일
# 💡 왜 제외? 빌드할 때마다 새로 만들어짐, 용량도 큼
# 📝 예시: mapofdev-1.0.jar (Gradle이 자동 생성)

# 압축 파일들
*.zip
*.tar.gz
*.rar
# 🔍 설명: 압축된 파일들
# 💡 왜 제외? 보통 임시로 만든 것들, 용량 큼

# JVM 오류 로그
hs_err_pid*
# 🔍 설명: 자바가 갑자기 꺼질 때 남기는 오류 기록
# 💡 왜 제외? 오류 발생시에만 생기는 임시 파일

# ================================================================
# 🏗️ Gradle 관련 (프로젝트 빌드할 때 생기는 것들)
# ================================================================

# Gradle 빌드 결과물 폴더
build/
# 🔍 설명: ./gradlew build 하면 여기에 컴파일된 파일들이 들어감
# 💡 왜 제외? 매번 새로 만들어지고, 용량이 매우 큼
# 📁 안에 들어있는 것: .class 파일, .jar 파일 등

# 예외: 이 파일은 꼭 Git에 포함해야 함!
!gradle/wrapper/gradle-wrapper.jar
# 🔍 설명: Gradle 자체를 실행하는 데 필요한 파일
# 💡 왜 포함? 다른 사람이 내 프로젝트를 받았을 때 Gradle 없이도 실행 가능

# Gradle 캐시 폴더
.gradle/
# 🔍 설명: Gradle이 빠른 실행을 위해 저장해두는 임시 파일들
# 💡 왜 제외? 개인 컴퓨터 설정이라 다른 사람에게는 의미 없음

gradle-app.setting
# 🔍 설명: Gradle 앱 설정 파일
# 💡 왜 제외? 개인 설정

# ================================================================
# 🌱 Spring Boot 관련 (스프링 부트 실행하면 생기는 것들)
# ================================================================

# Spring Boot가 만드는 폴더들
BOOT-INF/
META-INF/
# 🔍 설명: JAR 파일 안에 들어가는 메타데이터 폴더들
# 💡 왜 제외? 빌드할 때 자동으로 만들어짐

# DevTools 설정 파일
spring-boot-devtools.properties
# 🔍 설명: 개발할 때 자동 재시작 등을 위한 설정
# 💡 왜 제외? 개인 개발 환경 설정

# ================================================================
# 🔐 보안 관련 (절대 GitHub에 올리면 안되는 것들!!!)
# ================================================================

# 환경 변수 파일들 (API 키, 비밀번호 저장)
.env
.env.local
.env.development
.env.test
.env.production
# 🔍 설명: GITHUB_TOKEN=abc123 같은 민감한 정보 저장
# 💡 왜 제외? 해커가 보면 내 계정 해킹당함!
# 📝 예시: GITHUB_TOKEN=ghp_abc123xyz (절대 공개하면 안됨)

# 개인 설정 파일들
application-local.yml
application-dev.yml
application-prod.yml
application-secret.yml
# 🔍 설명: 데이터베이스 비밀번호, API 키 등이 들어있는 설정 파일
# 💡 왜 제외? 서버 비밀번호가 공개되면 큰일남

# SSH 키 파일들 (서버 접속용 열쇠)
*.pem
*.key
# 🔍 설명: 서버에 접속할 때 쓰는 개인 키
# 💡 왜 제외? 이게 공개되면 누구나 내 서버에 들어올 수 있음

# 인증서 파일들 (HTTPS용)
*.crt
*.p12
*.jks
# 🔍 설명: 웹사이트 보안 인증서
# 💡 왜 제외? 보안상 민감한 파일

# ================================================================
# 💾 데이터베이스 관련 (DB에서 나오는 파일들)
# ================================================================

# H2 데이터베이스 파일들 (개발용 임시 DB)
*.db
*.mv.db
*.trace.db
# 🔍 설명: H2 데이터베이스가 만드는 실제 데이터 파일
# 💡 왜 제외? 테스트 데이터라서 다른 사람에게는 필요 없음
# 📝 예시: mapofdev.mv.db (내 컴퓨터의 테스트 데이터)

# PostgreSQL 백업 파일들
*.sql
*.dump
# 🔍 설명: 데이터베이스를 백업한 파일
# 💡 왜 제외? 용량이 크고, 실제 사용자 데이터가 들어있을 수 있음

# 데이터 폴더들
/data/
/database/
/db-data/
# 🔍 설명: 데이터베이스 파일들을 저장하는 폴더
# 💡 왜 제외? 용량 크고, 개인 데이터

# ================================================================
# 📊 로그 및 임시 파일 (프로그램이 기록하는 것들)
# ================================================================

# 로그 파일들 (프로그램 실행 기록)
logs/
*.log
*.log.*
# 🔍 설명: 프로그램이 "오늘 몇 시에 뭘 했다" 기록하는 파일
# 💡 왜 제외? 개인 컴퓨터 실행 기록이라 다른 사람에게는 의미 없음
# 📝 예시: spring.log, error.log

# 임시 파일들
tmp/
temp/
cache/
# 🔍 설명: 프로그램이 임시로 만드는 파일들
# 💡 왜 제외? 말 그대로 임시 파일, 자동으로 삭제됨

# 백업 파일들
*.bak
*.backup
*.old
# 🔍 설명: 파일을 수정하기 전에 만드는 백업
# 💡 왜 제외? Git 자체가 백업 기능이라서 중복

# ================================================================
# 🛠️ IDE 관련 (개발 도구가 만드는 설정 파일들)
# ================================================================

# IntelliJ IDEA 설정들
.idea/
*.iws
*.iml
*.ipr
out/
# 🔍 설명: IntelliJ가 만드는 개인 설정 파일들
# 💡 왜 제외? 내 컴퓨터 설정이라 다른 사람에게는 맞지 않음
# 📝 예시: 윈도우 설정을 맥 사용자가 받으면 오류

# VS Code 설정들
.vscode/
*.code-workspace
# 🔍 설명: VS Code 개인 설정
# 💡 왜 제외? 각자 다른 설정을 쓰는 게 좋음

# Eclipse 설정들
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
# 🔍 설명: Eclipse IDE 설정 파일들
# 💡 왜 제외? Eclipse 사용자만 필요함

# ================================================================
# 🌐 프론트엔드 관련 (React, JavaScript 등)
# ================================================================

# Node.js 라이브러리 폴더
node_modules/
# 🔍 설명: npm install 하면 생기는 라이브러리들 폴더
# 💡 왜 제외? 용량이 엄청 큼 (수백 MB), package.json으로 다시 설치 가능
# 📊 용량 예시: React 프로젝트 node_modules = 약 200MB

# npm/yarn 오류 로그
npm-debug.log*
yarn-debug.log*
yarn-error.log*
# 🔍 설명: npm이나 yarn 설치 중 오류 발생시 로그
# 💡 왜 제외? 개인 컴퓨터에서만 의미 있는 오류 기록

# React 빌드 결과물
/frontend/build/
/frontend/dist/
# 🔍 설명: npm run build 하면 생기는 배포용 파일들
# 💡 왜 제외? 소스코드로 언제든 다시 빌드 가능

# ================================================================
# 🐍 Python 관련 (데이터 분석용)
# ================================================================

# Python 가상환경 폴더
venv/
env/
ENV/
.venv/
# 🔍 설명: python -m venv venv 로 만든 가상환경
# 💡 왜 제외? 용량 크고, requirements.txt로 다시 만들 수 있음
# 📝 예시: pip install pandas 한 것들이 여기 저장됨

# Python 컴파일 파일들
__pycache__/
*.pyc
*.pyo
*.pyd
# 🔍 설명: .py 파일을 실행하면 생기는 컴파일된 파일
# 💡 왜 제외? .py 파일만 있으면 자동으로 다시 만들어짐

# Jupyter Notebook 체크포인트
.ipynb_checkpoints/
# 🔍 설명: Jupyter Notebook이 자동 저장하는 백업 파일
# 💡 왜 제외? 임시 백업 파일

# ================================================================
# 📈 mapofdev 프로젝트 특화 데이터
# ================================================================

# 크롤링으로 수집한 데이터
/crawled-data/
*.csv
*.json
*.xlsx
# 🔍 설명: 사람인, 잡코리아에서 크롤링한 채용 데이터
# 💡 왜 제외? 용량이 크고, 저작권 문제 가능성
# 📊 예시: saramin_jobs_20241201.csv (수만 건 데이터)

# GitHub API 응답 캐시
/github-cache/
# 🔍 설명: GitHub API 호출 결과를 임시 저장
# 💡 왜 제외? 임시 데이터, API로 다시 받을 수 있음

# 분석 결과 파일들
/analysis-results/
/ml-models/
# 🔍 설명: 머신러닝 모델, 분석 결과 저장
# 💡 왜 제외? 용량이 크고, 코드로 다시 생성 가능

# 대용량 데이터셋
/datasets/
*.parquet
# 🔍 설명: 훈련용 데이터셋
# 💡 왜 제외? GitHub 100MB 제한, 별도 저장소 사용

# ================================================================
# 🔧 운영체제별 자동 생성 파일들
# ================================================================

# macOS가 자동으로 만드는 파일들
.DS_Store
.AppleDouble
.LSOverride
Icon?
# 🔍 설명: 맥에서 폴더 정보를 저장하는 숨김 파일
# 💡 왜 제외? 윈도우/리눅스 사용자에게는 쓸모없음

# Windows가 자동으로 만드는 파일들
Thumbs.db
Desktop.ini
*.tmp
*.temp
# 🔍 설명: 윈도우에서 썸네일, 폴더 설정 저장
# 💡 왜 제외? 맥/리눅스 사용자에게는 쓸모없음

# Linux 임시 파일들
*~
.nfs*
# 🔍 설명: 리눅스에서 만드는 임시 파일들
# 💡 왜 제외? 임시 파일

# ================================================================
# 🚀 배포 관련 (서버에 올릴 때 쓰는 것들)
# ================================================================

# Docker 관련
.dockerignore
# 🔍 설명: Docker 이미지 만들 때 제외할 파일 목록
# 💡 왜 제외? 프로젝트마다 다름

# Kubernetes 비밀 설정
k8s-secrets.yml
secrets.yml
# 🔍 설명: 서버 배포할 때 쓰는 비밀 정보
# 💡 왜 제외? 서버 비밀번호 등이 들어있음

# 배포 설정
deploy.config
deployment.properties
# 🔍 설명: 서버 배포 설정
# 💡 왜 제외? 개인/회사 서버 정보

# ================================================================
# 📦 기타 자주 생기는 파일들
# ================================================================

# Redis 데이터 파일
dump.rdb
# 🔍 설명: Redis가 저장하는 메모리 백업 파일
# 💡 왜 제외? 캐시 데이터라서 임시적

# 테스트 커버리지 보고서
/coverage/
*.lcov
# 🔍 설명: 테스트가 코드를 얼마나 커버하는지 보고서
# 💡 왜 제외? 테스트 실행할 때마다 새로 만들어짐

# ================================================================
# 🎯 맨 마지막에 추가하는 custom 설정들
# ================================================================

# 개인 메모 파일들
TODO.md
NOTES.md
개인메모.txt
# 🔍 설명: 개발하면서 개인적으로 쓰는 메모
# 💡 왜 제외? 개인적인 내용

# 테스트용 임시 파일들
test-*
temp-*
sample-*
# 🔍 설명: 기능 테스트하면서 만드는 임시 파일들
# 💡 왜 제외? 임시로 만든 것들

# ================================================================
# 💡 진남이를 위한 학습 가이드
# ================================================================
#
# 🎯 이 파일을 만드는 방법:
# 1. 프로젝트 루트 폴더에 .gitignore 파일 생성
# 2. 위 내용을 복사해서 붙여넣기
# 3. git add . 하기 전에 .gitignore부터 커밋
#
# 🔍 확인하는 방법:
# git status 명령어로 추적되지 않는 파일 확인
#
# ⚠️ 주의사항:
# - .gitignore에 추가하기 전에 이미 Git에 올라간 파일은 계속 추적됨
# - 이미 올라간 파일을 제거하려면: git rm --cached 파일명
#
# 📚 더 배우고 싶다면:
# - GitHub에서 "gitignore templates" 검색
# - gitignore.io 웹사이트 방문
# - 프로젝트 특성에 맞게 수정해서 사용
#